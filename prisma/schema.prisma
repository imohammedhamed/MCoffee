// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// User model
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  fullName  String
  phone     String
  profile   Profile?
  addresses Address[]
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Profile model
model Profile {
  id      String  @id @default(uuid())
  userId  String  @unique
  picture String?
  user    User    @relation(fields: [userId], references: [id])
}

// Address model
model Address {
  id              String  @id @default(uuid())
  userId          String
  area            String
  streetName      String?
  buildingType    String?
  buildingNumber  String
  floorNumber     String?
  apartmentNumber String
  mobileNumber    String
  user            User    @relation(fields: [userId], references: [id])
}

// Category model
model Category {
  id    String @id @default(uuid())
  name  String
  items Item[]
}

// Item model
model Item {
  id          String       @id @default(uuid())
  title       String
  picture     String
  price       Float
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  preferences Preference[]
}

// Preference model
model Preference {
  id         String  @id @default(uuid())
  size       String
  coffeeType String
  extraShot  Boolean
  milkType   String
  itemId     String
  item       Item    @relation(fields: [itemId], references: [id])
}

// Order model
model Order {
  id        String   @id @default(uuid())
  userId    String
  items     Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

// Explanation
// User: Stores user details and has a one-to-one relation with Profile and one-to-many relations with Address and Order.
// Profile: Stores additional user details like profile picture. This has a one-to-one relation with User.
// Address: Stores user addresses with a one-to-many relation to User.
// Category: Represents categories like hot drinks, ice drinks, breakfast, dessert. This has a one-to-many relation with Item.
// Item: Represents menu items and includes details like picture, title, price. This has a many-to-one relation with Category and a one-to-many relation with Preference.
// Preference: Stores user preferences for an item such as size, coffee type, extra shot, milk type. This has a many-to-one relation with Item.
// Order: Represents user orders and stores details in JSON format. This has a many-to-one relation with User.
